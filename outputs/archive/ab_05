Namespace(train_path='data/sabdab_2022_02_05/train_data.jsonl', val_path='data/sabdab_2022_02_05/val_data.jsonl', test_path='data/sabdab_2022_02_05/test_data.jsonl', save_dir='ckpts/tmp', load_model=None, cdr_type='3', hidden_size=256, batch_tokens=100, k_neighbors=9, block_size=8, update_freq=1, depth=4, vocab_size=21, num_rbf=16, dropout=0.1, lr=0.001, clip_norm=5.0, epochs=10, seed=7, anneal_rate=0.9, print_iter=50)
Training:217, Validation:16, Test:17
/content/RefineGNN/ab_train_2.py:112: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = GradScaler()
  0% 0/36 [00:00<?, ?it/s]/content/RefineGNN/ab_train_2.py:128: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with autocast():
/content/RefineGNN/structgen/hierarchical2.py:192: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast():
/content/RefineGNN/structgen/protein_features.py:302: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
Please either pass the dim explicitly or simply use torch.linalg.cross.
The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
  n_2 = F.normalize(torch.cross(u_2, u_1), dim=-1)
/usr/local/lib/python3.10/dist-packages/torch/_dynamo/eval_frame.py:632: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.5 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
100% 36/36 [00:39<00:00,  1.10s/it]
  0% 0/4 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torch/utils/checkpoint.py:87: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
100% 4/4 [00:03<00:00,  1.03it/s]
Epoch 0, Val PPL = 16.428, Val RMSD = 8.142
100% 36/36 [00:39<00:00,  1.10s/it]
100% 4/4 [00:03<00:00,  1.05it/s]
Epoch 1, Val PPL = 15.786, Val RMSD = 6.056
100% 36/36 [00:39<00:00,  1.09s/it]
100% 4/4 [00:03<00:00,  1.06it/s]
Epoch 2, Val PPL = 15.129, Val RMSD = 6.725
100% 36/36 [00:39<00:00,  1.10s/it]
100% 4/4 [00:03<00:00,  1.05it/s]
Epoch 3, Val PPL = 14.551, Val RMSD = 7.418
100% 36/36 [00:39<00:00,  1.09s/it]
100% 4/4 [00:03<00:00,  1.06it/s]
Epoch 4, Val PPL = 15.244, Val RMSD = 6.615
100% 36/36 [00:39<00:00,  1.10s/it]
100% 4/4 [00:03<00:00,  1.05it/s]
Epoch 5, Val PPL = 13.698, Val RMSD = 5.021
100% 36/36 [00:39<00:00,  1.10s/it]
100% 4/4 [00:03<00:00,  1.04it/s]
Epoch 6, Val PPL = 13.473, Val RMSD = 5.136
100% 36/36 [00:39<00:00,  1.10s/it]
100% 4/4 [00:03<00:00,  1.06it/s]
Epoch 7, Val PPL = 13.252, Val RMSD = 5.263
100% 36/36 [00:39<00:00,  1.09s/it]
100% 4/4 [00:03<00:00,  1.06it/s]
Epoch 8, Val PPL = 13.017, Val RMSD = 4.383
100% 36/36 [00:39<00:00,  1.09s/it]
100% 4/4 [00:03<00:00,  1.06it/s]
Epoch 9, Val PPL = 12.656, Val RMSD = 6.221
/content/RefineGNN/ab_train_2.py:157: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(best_ckpt)[0])
100% 4/4 [00:03<00:00,  1.05it/s]
Test PPL = 13.021, Test RMSD = 6.399
