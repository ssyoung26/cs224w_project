Namespace(train_path='data/sabdab_2022_02_10/train_data.jsonl', val_path='data/sabdab_2022_02_10/val_data.jsonl', test_path='data/sabdab_2022_02_10/test_data.jsonl', save_dir='ckpts/tmp', load_model=None, cdr_type='3', hidden_size=256, batch_tokens=100, k_neighbors=9, block_size=8, update_freq=1, depth=4, vocab_size=21, num_rbf=16, dropout=0.1, lr=0.001, clip_norm=5.0, epochs=10, seed=7, anneal_rate=0.9, print_iter=50)
Training:435, Validation:33, Test:35
/content/RefineGNN/ab_train_2.py:112: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  scaler = GradScaler()
  0% 0/70 [00:00<?, ?it/s]/content/RefineGNN/ab_train_2.py:128: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with autocast():
/content/RefineGNN/structgen/hierarchical2.py:192: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.amp.autocast():
/content/RefineGNN/structgen/protein_features.py:302: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
Please either pass the dim explicitly or simply use torch.linalg.cross.
The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
  n_2 = F.normalize(torch.cross(u_2, u_1), dim=-1)
/usr/local/lib/python3.10/dist-packages/torch/_dynamo/eval_frame.py:632: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.5 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
 70% 49/70 [00:42<00:18,  1.17it/s][50] Train PPL = 19.163
100% 70/70 [01:06<00:00,  1.06it/s]
  0% 0/7 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torch/utils/checkpoint.py:87: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
100% 7/7 [00:08<00:00,  1.17s/it]
Epoch 0, Val PPL = 15.933, Val RMSD = 8.596
 70% 49/70 [00:49<00:22,  1.05s/it][50] Train PPL = 15.741
100% 70/70 [01:07<00:00,  1.03it/s]
100% 7/7 [00:08<00:00,  1.16s/it]
Epoch 1, Val PPL = 14.925, Val RMSD = 8.295
 70% 49/70 [00:48<00:27,  1.30s/it][50] Train PPL = 14.486
100% 70/70 [01:08<00:00,  1.03it/s]
100% 7/7 [00:08<00:00,  1.15s/it]
Epoch 2, Val PPL = 13.536, Val RMSD = 6.650
 70% 49/70 [00:44<00:16,  1.26it/s][50] Train PPL = 13.476
100% 70/70 [01:07<00:00,  1.03it/s]
100% 7/7 [00:08<00:00,  1.15s/it]
Epoch 3, Val PPL = 14.499, Val RMSD = 9.319
 70% 49/70 [00:50<00:21,  1.03s/it][50] Train PPL = 13.483
100% 70/70 [01:07<00:00,  1.03it/s]
100% 7/7 [00:08<00:00,  1.16s/it]
Epoch 4, Val PPL = 13.404, Val RMSD = 6.726
 70% 49/70 [00:49<00:19,  1.08it/s][50] Train PPL = 13.127
100% 70/70 [01:08<00:00,  1.03it/s]
100% 7/7 [00:07<00:00,  1.14s/it]
Epoch 5, Val PPL = 12.983, Val RMSD = 6.230
 70% 49/70 [00:43<00:16,  1.27it/s][50] Train PPL = 12.913
100% 70/70 [01:07<00:00,  1.03it/s]
100% 7/7 [00:08<00:00,  1.16s/it]
Epoch 6, Val PPL = 13.021, Val RMSD = 5.618
 70% 49/70 [00:50<00:18,  1.13it/s][50] Train PPL = 12.726
100% 70/70 [01:08<00:00,  1.03it/s]
100% 7/7 [00:07<00:00,  1.14s/it]
Epoch 7, Val PPL = 13.013, Val RMSD = 6.801
 70% 49/70 [00:44<00:20,  1.03it/s][50] Train PPL = 12.802
100% 70/70 [01:07<00:00,  1.04it/s]
100% 7/7 [00:08<00:00,  1.15s/it]
Epoch 8, Val PPL = 13.023, Val RMSD = 5.526
 70% 49/70 [00:47<00:19,  1.09it/s][50] Train PPL = 12.381
100% 70/70 [01:08<00:00,  1.03it/s]
100% 7/7 [00:08<00:00,  1.16s/it]
Epoch 9, Val PPL = 12.157, Val RMSD = 5.378
/content/RefineGNN/ab_train_2.py:157: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(best_ckpt)[0])
100% 6/6 [00:07<00:00,  1.26s/it]
Test PPL = 12.732, Test RMSD = 4.757
